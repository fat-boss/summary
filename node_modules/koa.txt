http://www.android100.org/html/201612/04/265328.html

koa是Express的下一代基于Node.js的web框架 

1.x版本使用的generator

2.+版本使用的async

var koa = require('koa');
var app = new koa();


app.use(async (ctx,next)=>{
    console.log(`${ctx.request.method}+${ctx.request.url}`);
    await next();
})
app.use(async (ctx,next)=>{
    const start = new Date().getTime();
    await next();
    const ms = new Date().getTime()-start;
    console.log(`Time:${ms}ms`)
});

app.use(async (ctx,next)=>{
    await next();
    ctx.response.type = 'text/html';
    ctx.response.body = '<h1>hello koa</h1>'
})
app.listen(8888)

export default app//这里导出意义并不大，只是说明在这个js文件并不能直接用node运行，因为包含es7语法

在package.json文件中
"dependencies": {
    "babel-polyfill": "^6.23.0",
    "koa": "^2.2.0"
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-stage-3": "^6.24.1",
    "babel-register": "^6.24.1"
  },
  "babel": {  //这个配置文件必须要有
    "presets": [
      "es2015",
      "stage-3"
    ]
  }
  
如果不在json文件中配置，则需要新建一个文件 命名：.babelrc
文件内容：
{
  "presets": ["stage-3", "es2015"]
}


  在app.js文件同目录下新建一个index.js文件
  index.js文件内容
	require('babel-register');
	require('babel-polyfill');
	require('./app')
	
使用node运行这个文件 即可打开服务器