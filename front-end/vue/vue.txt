new Vue({
	el: '#app',
	template: '',
	data:{},
	methods:{},
	filters:{},
	computed:{},
	watch:{},
	components: {}
})

app.$watch('prop',function(oldVal,newVal){  //与上述的watch效果相同

})

template和components可以直接用render来替换(至少只有一个子组件可以这样用)

// template: '<App/>',
  render: h => h(App)
  // components: { App }


computed中的属性设置可以写成 同Object.defineProperty类似
computed: {
	fullname: {
		get: function(){
			return this.firstname + ' ' + this.lastname
		},
		set: function(val){
			var names = val.split(' ');
			this.firstname = names[0]
			this.lastname = names[1]
		}
	}
}

Vue.component('myCon',{   //  <my-con></my-con>
	props:[],
	template: '<div></div>'
})

<!-- 阻止单击事件冒泡 -->
<a v-on:click.stop="doThis"></a>
<!-- 提交事件不再重载页面 -->
<form v-on:submit.prevent="onSubmit"></form>
<!-- 修饰符可以串联  -->
<a v-on:click.stop.prevent="doThat"></a>
<!-- 只有修饰符 -->
<form v-on:submit.prevent></form>
<!-- 添加事件侦听器时使用事件捕获模式 -->
<div v-on:click.capture="doThis">...</div>
<!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 -->
<div v-on:click.self="doThat">...</div>

全部的按键别名：
.enter
.tab
.delete (捕获 “删除” 和 “退格” 键)
.esc
.space
.up
.down
.left
.right

.ctrl
.alt
.shift
.meta

v-model.lazy .number .trim


prop验证

Vue.component('example', {
  props: {
    // 基础类型检测 （`null` 意思是任何类型都可以）
    propA: Number,
    // 多种类型
    propB: [String, Number],
    // 必传且是字符串
    propC: {
      type: String,
      required: true
    },
    // 数字，有默认值
    propD: {
      type: Number,
      default: 100
    },
    // 数组／对象的默认值应当由一个工厂函数返回
    propE: {
      type: Object,
      default: function () {
        return { message: 'hello' }
      }
    },
    // 自定义验证函数
    propF: {
      validator: function (value) {   //validator:验证器
        return value > 10
      }
    }
  }
})


vue-router

const routes = [
	{ 
		path: '/foo',component: {
			template: '<div>foo</div>'
			}
	}，
	{
		path: '/bar', component: {
			template: '<div>bar</div>'
		}
	}
]
const router = new VueRouter({
	routes
})

const vm = new Vue({
	router
}).$mount('#app')

<div id="app">
  <h1>Hello App!</h1>
  <p>
    <!-- 使用 router-link 组件来导航. -->
    <!-- 通过传入 `to` 属性指定链接. -->
    <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
    <router-link to="/foo">Go to Foo</router-link>
    <router-link to="/bar">Go to Bar</router-link>
  </p>
  <!-- 路由出口 -->
  <!-- 路由匹配到的组件将渲染在这里 -->
  <router-view></router-view>
</div>

$route.params

网上回答 assets和static的区别
assets 文件夹的内容会被 webpack 打包到一起
而 static 文件夹是浏览器直接去请求文件了

assests放置的是组件的资源，static放置的是非组件的资源。

比如说即static下的文件资源作为src路径传入组件中，文件的path是可以被解析了，而assets则不行。

比如你写一个音乐播放器，类似的播放键和上一曲下一曲这些图标就应该作为组件资源放在assests里面，
而不同音乐选集的封面这些是应该作为文件资源放在static下