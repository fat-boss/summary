1. HashLocationStrategy

一：浏览器想服务器发送请求时不会带上hash部分的内容，浏览器想服务器发送的请求都为同一个，服务器只需要返回应用首页
angular在获取首页后会根据hash的内容去匹配路由配置项并渲染相应的组件

二：更改URL的hash部分不会向服务器重新发送请求，使得在进行跳转的时候不会引发页面的刷新和应用的重新加载

使用方式

imports: [RouterModule.forRoot(rootRouterConfig,{useHash:true})]

2. PathLocationStrategy
PathLocationStrategy使用URL的path部分来进行路由匹配，因此与HashLocationStrategy不同之处自傲与，浏览器会将配置项对应的URL
原封不动的发送给服务器

满足PathLocationStrategy路由策略必须满足三个条件：
1. 浏览器支持history.pushState()方法，这一方法使得RouterLink指令在跳转时几遍更改了URL的path部分，却依然不会引起页面刷新
2. 需要在服务器进行设置，将应用的所有URL重定向到应用的首页。
因为该策略所生成的URL在（如：http://localhost:3000/list）在服务器上并不存在与其相对应的文件结构，
如果不进行重定向，服务器将返回404
3. 需要为应用设置一个base路径，Angular将以base路径为前缀来生成和解析URL。
这样做的好处是浏览器可以根据base路径来区分来自不同应用的请求。

1.
index.html中
<base href="/app">  -->   http://localhost:3000/app/list

2.app.module中

import {APP_BASE_HREF} from “@angular/common”

@NgModule({
	providers: [{provide: APP_BASE_HREF,useValue: '/app'}]
})

第二种优先级更高
